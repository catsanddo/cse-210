let read_line() = (
	let buffer = dim(0),
	let in = input(),
	output("> "),
	(
		let buffer = buffer + input()
		in = input()
	) until in == '\n',
	buffer
),

let find_end(buffer, ip) = (
	let depth = 0,
	let current = 0,
	(
		let current = buffer[ip],
		let depth = depth + (current == '[' ? 1 : 0),
		let depth = depth - (current == ']' ? 1 : 0),
		let ip = ip + 1
	) until current == ']' and depth == 0
),

let find_start(buffer, ip) = (
	let depth = 0,
	let current = 0,
	(
		let current = buffer[ip],
		let depth = depth + (current == ']' ? 1 : 0),
		let depth = depth - (current == '[' ? 1 : 0),
		let ip = ip - 1
	) until current == '[' and depth == 0,
	ip + 1
),

let cells = dim(30000),
let head = 0,
let buffer = read_line(),
let ip = 0,

(
	let in = buffer[ip],
	in == '+' ?
		let cells[head] = cells[head] + 1
	: in == '-' ?
		let cells[head] = cells[head] - 1
	: in == '<' ?
		let head = head - 1
	: in == '>' ?
		let head = head + 1
	: in == '[' and cells[head] == 0 ?
		ip = find_end(buffer, ip)
	: in == ']' ?
		ip = find_start(buffer, ip)
	: in == '.' ?
		output(cells[head])
	: in == ',' ?
		let cells[head] = input()
	: ()
) until ip >= len(buffer)
